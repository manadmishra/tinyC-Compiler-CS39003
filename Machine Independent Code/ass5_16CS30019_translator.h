#ifndef ASS5_16CS30019_TRANSLATOR_H
#define ASS5_16CS30019_TRANSLATOR_H

#include <stdio.h>
#include <vector>
#include <cstdlib>
#include <string>
using namespace std;
extern int size_int;
extern int size_double;
extern int size_pointer;
extern int size_char;
extern int size_bool;

class type_n;// to store a type and its list
class expresn;// to be used for truelist,falselist and nextlist
class quad; //to define quad so that we can further use it to make array
class symdata; //to enter data into symbol table
class symtab; //usual symbol table
class quad_arr; //it stores the list of quads for the expression and also emits the required emits
class funct;
class array;
//void totest(string x);//to test
struct decStr;
struct idStr;
struct expresn;
struct arglistStr;
extern type_n *glob_type; //to store the global type for inherited attributes
extern int glob_width; // to store the global width for inherited attributes
extern int next_instr; //next instr for use in quads and in different function like backpatch
extern int temp_count; // count of the temporary varibles to name the new temporary variable
extern symtab *glob_st; //Global symbol table pointer
extern symtab *curr_st; //Current Symbol table pointer
extern quad_arr glob_quad; //to store all the quads that will be generated by the grammar

enum types{
	tp_void=0,tp_bool,tp_char,tp_int,tp_double,tp_ptr,tp_arr,tp_func
};

typedef struct list{
	int index;
	struct list *next;
}list;

enum opcode{

	//Binary Assignment Operator
	Q_PLUS=1,Q_MINUS,Q_MULT,Q_DIVIDE,Q_MODULO,Q_LEFT_OP,Q_RIGHT_OP,
	Q_XOR,Q_AND,Q_OR,Q_LOG_AND,Q_LOG_OR,Q_LESS,Q_LESS_OR_EQUAL,
	Q_GREATER_OR_EQUAL,Q_GREATER,Q_EQUAL,Q_NOT_EQUAL,

	//Unary Assignment Operator
	Q_UNARY_MINUS,Q_UNARY_PLUS,Q_COMPLEMENT,Q_NOT,

	//Copy Assignment
	Q_ASSIGN,

	//Unconditional Jump
	Q_GOTO,

	//Conditional Jump
	Q_IF_EQUAL,Q_IF_NOT_EQUAL,Q_IF_EXPRESSION,Q_IF_NOT_EXPRESSION,
	Q_IF_LESS,Q_IF_GREATER,Q_IF_LESS_OR_EQUAL,Q_IF_GREATER_OR_EQUAL,

	//Type Conversions
	Q_CHAR2INT,Q_CHAR2DOUBLE,Q_INT2CHAR,Q_DOUBLE2CHAR,Q_INT2DOUBLE,Q_DOUBLE2INT,


	//Procedure Call
	Q_PARAM,Q_CALL,Q_RETURN,

	//Pointer Assignment Operator
	Q_LDEREF,Q_RDEREF,
	Q_ADDR,

	//Array Indexing
	Q_RINDEX,
	Q_LINDEX,

};

//it is the basic type that an element can have
union basic_val{
	int int_val;
	double double_val;
	char char_val;
};

class type_n{
public:
	int size;    // to save the size of the type
	types basetp; // to save the basic type of the elemnt
	type_n *next; // to save next type_n type for arrays
	type_n(types t,int sz=1, type_n *n=NULL); //constuctor
	int getSize(); //returns the size
	types getBasetp(); //return Base type
	void printSize(); //to print the size
	void print(); 
};

type_n *CopyType(type_n *t);

class array
{
public:

	/* Stores the array base and the variable containing array offset */
	string base_arr;
	types tp;
	/* Initiates array name, offset and array type */
	array(string s,int sz,types t);
	/* Stores array dimensions */
	vector<int> dims;

	/* Size of base type */
	int bsize;

	/* Number of dimensions */
	int dimension_size;

	/* Adds an array index for array accessing */
	void addindex(int i);

};



/* To store details of functions, its parameters and return type */
class funct
{
public:
	/* Parameter type list */
	vector<types> typelist;

	/* Return type */
	type_n *rettype;

	funct(vector<types> tpls);
	/* Prints details in suitable format */
	void print();
};


//class which will be used as building element for symbol table
class symdata{
public:
	string name;//to store the value of a varaible stored in symbol table
	int size; //to stoe the size of an element in a symbol table
	int offset;//to maintain the offset at this variable to know the position at symbol table
	basic_val i_val;//to store the initialized value for an element stored at symbol table
	type_n *tp_n;//for storing the type of element
	symtab *nest_tab; //to store the pointer to the symbol table to which the current element belongs to
	array *arr;//to store the pointer to an array if its an array type
	funct *fun;//to store the pointer to a function if its an function
	void createarray();
	string var_type;//to store whether the varaible is "null=0" "local=1" "param=2" "func=3" "ret=4" "temporary=5"
	bool isInitialized; //If the value of element is initialized or not
	bool isFunction; //to know whether the current element is function like function pointer
	bool isArray; // to know whether the current element is ab array it helps if we have been in grammar tree
	symdata(string n=""); //name is initialized to null that will be used for naming temporary variables
};	

class symtab{
public:
	string name;			// name of the symbol
	int offset;				// final offset of this symbol table that will be used in the update function
	vector<symdata*> symbol_tab; //maintaining a list of symbol tables
	symtab();  //constructor
	~symtab(); //destructor
	symdata* lookup(string n);// Lookup function searches the variable with name. If the variable is present then returns its pointer location else creates a new entry with its name and returns that pointer
	symdata* search(string n); //it searches for the variable and returns the oiter to it if present
	symdata* gentemp(type_n *type); //gentemp creates a new element in the symbol table with the type provided at the time of constructing
	void update(symdata *loc,type_n *type,basic_val initval, symtab *next = NULL);//
	void print();
};

struct expresn{
	symdata* loc;
	type_n* type;
	list* truelist;
	list* falselist;
	bool isPointer;
	bool isArray;
	symdata *arr;
};
list* makelist(int i);  //creates a list have only one element as i
list* merge(list *l1,list *l2); //merges the the two list and return a merged list
void backpatch(list *l,int i);  //to fill the dangling list of goto's l1 to i
void conv2Bool(expresn *e); //to convert the given exprssion type to bool mostly used in relational operator
void typecheck(expresn *e1,expresn *e2,bool isAss = false);
void print_list(list *root);
// struct for declaration grammar
struct decStr
{
	type_n *type;						// type of the current declaration
	int width;					// width of the variable
};

class quad{
public:
	string arg1,result,arg2; //consist of three elements 
	opcode op;
	void print_arg();
	quad(opcode,string,string,string); //constructorparameters
};

struct arglistStr
{
	vector<expresn*> *arguments;		// A simple vector is used to store the locations of all seen arguments
};

// struct for a identifier
struct idStr
{
	symdata *loc;					// pointer to the symboltable
	string *name;						// name of the identifier
};

struct strstr{
	type_n lop;
	string name;
};

class quad_arr{
public:
	vector<quad> arr;//to store the list of quads
	quad_arr();
	void emit(opcode opc, string arg1="", string arg2="", string result=""); //emit used for operations with 3 inputs
	void emit(opcode opc, int val, string operand="");  // emit for assignment of integer
	void emit(opcode opc, double val, string operand=""); //emit for assignment of double
	void emit(opcode opc, char val, string operand=""); //emit for assignment of char
	void print();  //print all the quads
};

#endif
